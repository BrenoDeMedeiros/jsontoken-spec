<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc private="Draft" ?>
<?rfc comments="no"?>
<?rfc inline="no"?>
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-balfanz-jsontoken-00" >
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <title abbrev="JSON Tokens">JSON Tokens</title>
    <author fullname="Dirk Balfanz" initials="D.B." role="editor" surname="Balfanz">
      <organization>Google Inc.</organization>
      <address>
        <postal>
          <street>1600 Ampitheatre Parkway</street>
          <!-- Reorder these if your country does things differently -->
          <city>Mountain View</city>
          <region>CA</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone/>
        <email>balfanz@google.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="John Panzer" initials="J.P." surname="Panzer">
      <organization>Google Inc.</organization>
    </author>
    <date month="September" year="2010"/>
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>signatures</keyword>
    <keyword>PKI</keyword>
    <abstract>
      <t>This document defines a lightweight, robust mechanism for
      digitally signing authentication and authorization messages
      ("JSON Tokens") in a format that's easily included in HTTP
      requests.</t>
      <t>It is a subset and concrete profile of
      the <xref target="MagicSignatures">Magic Signatures</xref>
      specification.</t>
    </abstract>
  </front>
  <middle>

    <section title="Introduction">
      <t>JSON Tokens are digitally-signed JSON strings with a
         prescribed set of parameters in their payload. We
         use <xref target="MagicSignatures">Magic Signatures Compact
         Serialization</xref> to encode and sign the JSON payload.</t>
      <t>JSON Tokens are created by issuers, and consumed by
         verifiers. While this documents describes a set of common
         payload parameters for JSON Token, concrete applications of
         JSON Tokens can further refine the set of payload parameters,
         and need to define their own distinct data type parameter
         to be included in the signature.
      </t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>
    <section anchor="definitions" title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="Signature:">A digital signature that provably
             binds a message to a signer's secret key.</t>
          <t hangText="Issuer:">The entity that creates and signs the
             JSON token.</t>
          <t hangText="Verifier:">The entity that consumes and verifies the
             JSON token.</t>
          <t hangText="Server Descriptor:">A server descriptor is a
             https or http URL. This URL resolves to a document that
             describes the server (such as keys used to sign requests
             or tokens, location of certain endpoints, etc.). Details
             of the document are described below in <xref target="discovery"/>.
             A verifier must be able to determine the server
             descriptor of the issuer from the "issuer" field in the
             token payload (see below). For example, verifiers could
             specify that issuers put their service descriptor
             directly in the "issuer" field. Alternatively, verifiers
             could require issuers to pre-register with the verifier,
             create a "client id" for the issuer, and maintain a
             mapping from client ids to server descriptors of
             issuers. In this latter case, issuers would include their
             client id into the "issuer" field of the token
             payload.</t>
        </list>
      </t>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>
    <section title="JSON Tokens">
      <t>A JSON Token comprises a serialized JSON payload bundled
         along with a signature for that payload, expressed as a
         series of parameters. The serialized JSON payload, together
         with the other parameters, is called
         a <xref target="MagicSignatures">"Magic Envelope"</xref>.
         The envelope specifies the data to be signed, the MIME type
         of the data, the transfer encoding, and the signature.</t>
      <section title="Magic Envelope Parameters" anchor="params">
        <t>
        This section describes the semantics of the parameters use by
        JSON Tokens.
        <list style="hanging">
          <t hangText="data:">The payload covered by the signature,
            encoded into an ASCII string. This is a base64-encoding of
            the payload JSON (see <xref target="encoding_details"/>).
            Appears exactly once.</t>
          <t hangText="data_type:">The <xref target="RFC2045">MIME</xref>
            type of the payload prior to encoding.  Appears exactly
            once. Different JSON token types use different data
            types.</t>
          <t hangText="encoding:">The encoding used to convert between
            the MIME type and the "data" string.  In this
            specification, encoding MUST be the string "base64url",
            indicating the url safe base64 encoding as described
            in <xref target="RFC4648">RFC 4648</xref>, with the
            whitespace normalization rules specified in
            <xref target="encoding_details"/>.  All implementations
            MUST support this encoding.  Appears exactly once.</t>
          <t hangText="alg:">The algorithm used for the signature.
            This specification describes only one public key signature
            algorithm, "RSA-SHA256", and one private key signature
            algorithm, "HMAC-SHA256". Appears exactly once.</t>
          <t hangText="sig:">A generated signature.  This is a string
            in the base64url encoded format as described below.  It is
            generated according to the rules for the "alg" in
            use. Appears exactly once.</t>
          <t hangText="key_id:">Optional hint indicating which
            specific key owned by the issuer should be used to verify
            the signature.  This allows issuers to explicitly signal a
            change of key to recipients.  Omitting this parameter is
            equivalent to setting it to an empty string.  The format
            of this parameter is unspecified except that all
            characters must be from the base64url allowed character
            set.  Thus, "", "1", "AH478=", "0x6EF37D", and "fred" are
            all legal key_ids.  The exact format is up to the
            issuer.  Note that any binary data can be converted into
            an acceptable key_id by base64url encoding it.  One way to
            generate a usable key_id is to base64url-encode the SHA256
            hash of the public signing key's magicsig representation;
            this allows a signer to provide usable ids without
            maintaining a mapping table.</t>
        </list>
        </t>
      </section>
      
      <section title="Payload Parameters">
        <t>The "data" payload is a serialized JSON data
        structure. This JSON data structure itself contains the
        following parameters:
        <list style="hanging">
          <t hangText="issuer">A string that allows the verifier to
            determine the server descriptor of the issuer. This could
            be the service descriptor itself, or some form of client
            id, which the verifier can map to a server descriptor (see
            above). Type: string</t>
          <t hangText="not_before">When does this token become valid
            (seconds since midnight 1/1/1970 zulu). Type: integer</t>
          <t hangText="not_after">When does this token expire (seconds
            since midnight 1/1/1970 zulu). Type: integer</t>
          <t hangText="audience">The audience for this token. The
          precise semantics of this field, and how it is validated,
          depends on the application. Type: string</t>
	</list>
        </t>
      </section>

      <section title="The Signature Base String" anchor="sbs">
        <t>The Signature Base String used for both RSA-SHA256 and
          HMAC-SHA256 is described here.  It is used as input to the
          signature algorithms, as well as to create
          the <xref target="compact">JSON Token Serialization</xref>,
          below.</t>
        <t>Given a Magic Envelope with "data", "data_type",
          "encoding", and "alg" parameters, the corresponding
          Signature Base String is produced by concatenating the
          following substrings together, separated by periods (ASCII
          0x2E):</t>
        <t>
        <list style="numbers">
          <t>The armored string for "data" produced by <xref
              target="encoding_details"/></t>
          <t>The Base64url encoding of the "data_type" parameter</t>
          <t>The Base64url encoding of the "encoding" parameter</t>
          <t>The Base64url encoding of the "alg" parameter</t>
        </list>
        An omitted parameter is represented by a zero length placeholder string.
        </t>
      </section>

      <section title="JSON Token Serialization" anchor="compact">
        <t>JSON Token serialization
          uses <xref target="MagicSignatures">Magic Envelope Compact
          Serialization</xref>, which is produced by concatenating the
          following substrings together, separated by periods (ASCII
          0x2E):</t>
        <t>
        <list style="numbers">
          <t>The value of the "key_id" parameter</t>
          <t>The value of the "sig" parameter</t>
          <t>The Signature Base String as described in <xref target="sbs">The Signature Base
          String</xref>, above.</t>
        </list>
        </t>
        <t>For example, if the key_id is
          "4k8ikoyC2Xh+8BiIeQ+ob7Hcd2J7/Vj3uM61dy9iRMI=", the "sig" is
          "EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2fWHvLKJzeGLKfyHg8ZomQ",
          and the armored data is "Tm90IHJlYWxseSBBdG9t" with MIME
          type application/atom+xml, then the JSON Token serialization
          would be the string:
          "4k8ikoyC2Xh+8BiIeQ+ob7Hcd2J7/Vj3uM61dy9iRMI=.EvGSD2vi8qYcveHnb-rrlok07qn
          CXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2fWHvLKJzeGLKfyHg8ZomQ.Tm90IHJlYWxse
          SBBdG9t.YXBwbGljYXRpb24vYXRvbSt4bWw=.YmFzZTY0dXJs.UlNBLVNIQTI1Ng=="
        </t>
        <t>Any parameter MAY be omitted by leaving its slot empty, as
          indicated by two consecutive periods.  When the "encoding"
          parameter is omitted, a recipient MUST decode the envelope
          as if it had the value "base64url".  When the "alg"
          parameter is omitted, a recipient MUST interpret the message
          as if the "alg" parameter had the value "RSA-SHA256".  The
          "data_type" parameter SHOULD NOT be omitted as it provides a
          defense against content type masquerading attacks.</t>
      </section>
    </section>

    <section title="Encoding of data and sig using base64url" anchor="encoding">
      <t>The data and sig fields of a Magic Envelope are encoded as
        armored ASCII strings as described below:</t>
      <section title="Encoding" anchor="encoding_details">
        <t>
          The basic procedure is to use the URL and Filename safe
          variant of the base64 encoding as described in
          <xref target="RFC4648">RFC 4648</xref>, section 5, hereafter
          known as "base64url" encoding. The result is a string that
          consists only of the ASCII alphanumeric characters along
          with '-' and '_', and possibly '='.  In regular expression
          form, this is "^[A-Za-z0-9\-_]*=?=?=?$".  This is the
          normalized form of the encoded data, and is the basis for
          the octet sequence that is used to generate the digital
          signature.  Implementations and transports MAY add arbitrary
          whitespace (ASCII values 0x09-0x0D and 0x20) anywhere in
          this string after signing but before output so as to, e.g.,
          comply with line length restrictions in certain
          environments.
        </t>
      </section>
      <section title="Decoding">
        <t>
          The basic procedure is the reverse of encoding, with the
          additional step that whitespace from the input should be
          ignored.  This is necessary for robustness because some
          transports may insert whitespace, and is useful to allow for
          human readable formatting of documents in any case.
          <list style="numbers">
            <t>Normalize the string by removing all whitespace characters from input.</t>
            <t>Base64url decode the resulting string to produce the original binary data.</t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="The HMAC-SHA256 Private Key Signature Algorithm">
      <t>This section defines a basic HMAC based private key signature
        algorithm.  HMAC key exchange and rotation is outside the
        scope of this specification, but may be defined in
        specifications relying on this one.</t>
      <section title="Calculating the HMAC-SHA256 signature string">
        <t>First, create an HMAC-SHA256 signature using the algorithm
          described in <xref target="RFC2104">RFC 2104</xref>, using
          SHA-256 as the hash function H, base string described in
          <xref target="sbs"/> as the input text, and the shared
          secret key K.  The resulting array of bytes is then
          base64url encoded to produce the "sig" parameter.</t>
      </section>
      <section title="Signing and Verifying JSON Tokens with HMAC-SHA256" anchor="hmac-verify">
        <t>Signing consists of calculating the "sig" parameter and
          serializing it along with the other parameters to create a
          Magic Envelope.  Verifying consists of re-calculating the
          expected "sig" parameter given the other parameters, and
          doing an exact string comparison of the "sig" parameters
          after normalization (whitespace removal).</t>
      </section>
    </section>
    
    <section title="The RSA-SHA256 Public Key Signature Algorithm">
      <t>This section defines the default public key signature
        algorithm for Magic Signatures.  In addition to indicating the
        signing algorithm, use of RSA-SHA256 by default also implies
        use of the Magic Public Key Infrastructure
        <xref target="mpki"/> to obtain public keys.  Specifications
        relying on Magic Signatures MAY specify other mechanisms for
        key retrieval.</t>      
       <section title="Signing JSON Tokens with RSA-SHA256" anchor="signing">
        <t>Signing a JSON Token consists of signing the contents of
          "data", "data_type", "encoding", and "alg" using the chosen
          algorithm.  This section defines the "RSA-SHA256" algorithm,
          meaning the RSASSA-PKCS1-v1_5 signature algorithm
          from <xref target="RFC3447">RFC 3447</xref> section 8.2,
          also known as PKCS#1, using SHA-256 as the hash function for
          EMSA-PKCS1-v1_5.</t>
        <t>Note: As best current crypto practices change, new
          algorithms will become available and both extensions and
          future revisions of this specification may include
          additional new public key algorithms (e.g., RSASSA-PSS).
          When both clients and servers have sufficiently widespread
          support for the latest algorithm, older algorithms (e.g.,
          RSASSA-PKCS1-v1_5) will be deprecated and removed in
          subsequent revisions of this specification.</t>
        <t>The signature is computed as signature_octets =
          RSASSA-PKCS1-V1_5-SIGN (K, M), where K is the private
          signing key and M is the <xref target="sbs">Signature Base
          String</xref> defined above.</t>
        <t>The signature is then encoded as in
          <xref target="encoding_details"/> and the resulting ASCII
          armored string stored as a "sig" signature.  The associated
          "key_id" is the key_id associated with that signing key and
          published per <xref target="mpki"/>.  If the signer does not
          maintain individual key_ids, it SHOULD output the base64url
          encoded respresentation of the SHA-256 hash of public key's
          application/magic-key representation.</t>
      </section>
      <section title="Verifying JSON Tokens with RSA-SHA256" anchor="verifying">
        <t>Verifying a JSON Token signature consists of verifying that
          "sig" is a valid signature for "data" using "alg".  This
          specification defines only the "RSA-SHA256" verification
          algorithm, meaning the RSASSA-PKCS1-v1_5 verification
          algorithm from <xref target="RFC3447">RFC 3447</xref>
          section 8.2.1.</t>
        <t>The verification is performed by executing
          RSASSA-PKCS1-V1_5-VERIFY ((n, e), M, S), where (n ,e)
          comprise the public key, M is the Signature Base String
          documented in <xref target="sbs"/>, and S is the decoded
          value of a selected "sig".  (Note that this algorithm
          creates the emsa byte sequence as in
          <xref target="signing"/> and then performs RSA verification
          using (n, e), emsa, and S.)</t>
      </section>
    </section>
    <section title="Validating JSON Tokens">
      <t>When receiving a JSON Token, a client can validate the token,
        provided it has access to a signature verification key
        (discussed in further detail below). It needs to perform the
        following steps:
	<list style="numbers">
	  <t>extract the key identifier from the token, obtain
             verification key for the issuer and key identifier (more
             details <xref target="mpki">below</xref>).</t>
          <t>using verification key, verify signature on payload as
             explained in <xref target="hmac-verify"/> and
             <xref target="verifying"/>.</t>
          <t>verify that the current time is not before the not_before
             timestamp in the payload, and that the current time is
             not after the expiration time of the token (defined as
             not_before + token_lifetime). The verifier SHOULD be
             lenient and anticipate some clock skew on the issuer's
             side.</t>
           <t>verify the audience field in an application-dependent
             manner.</t>
         </list>
       </t>
    </section>
    <section title="Obtaining Verification Keys" anchor="mpki">
     <t>
      <list style="hanging">
	<t hangText="Obtaining RSA Verification Keys:">To obtain an RSA
          verification key, the client accesses the Server Descriptor
          of the issuer (perhaps after mapping the issuer string
          obtained from the token payload to the Server Descriptor),
          and parses the returned document. The returned document may
          include one or more public keys, labeled with key
          identifiers (details below in
          the <xref target="discovery">Discovery</xref> section). The
          key that matches the key_id from the token's envelope shall
          be used to verify the token. If there is no key_id in the
          token's envelope, then token validation succeeds if any of
          the obtained keys successfully verifies the signature.
        </t>
	<t hangText="Obtaining HMAC Verification Keys:">To obtain an
          HMAC verification key, the verifier has to exchange, in an
          out-of-band fashion, shared keys with the issuer. Each key
          must be labeled with an identifier, unless there is only one
          shared key at any given point in time, in which case no
          label is necessary, and the key_id parameter in the payload
          will be ignored by the client.
        </t>
      </list>
     The remainder of this section will deal with public (RSA) keys only.     
     </t>
     <section title="The application/magic-key MIME type">
       <t>The application/magic-key format is a very minimal format
         for representing public key data.  It consists of a string of
         ASCII text, separated into 3 components, with components
         separated by a "." (0x2E) character.  The first component is
         the key type; this specification only defines the "RSA" key
         type for future upgradeability.  Thus a magic key consists of
         the string "RSA.modulus(n).exponent(e)"; for example:
          <figure><artwork><![CDATA[
RSA.mVgY8RN6URBTstndvmUUPb4UZTdwvwmddSKE5z_jvKUEK6yk1u3rrC9yN8k6FilGj9K0eeUPe2hf4Pj-5CmHww.AQAB
]]></artwork></figure> The pair (n, e) is used as input to
RSASSA-PKCS1-V1_5-VERIFY.</t>
        <t>Each of the components is first represented as an integer
          in network byte order (big endian) and encoded via the
          "base64url" mechanism described in <xref target="params"/>.
        </t>
        <t>This specificaion defines only a public key format, and
          anticipates that keypairs may be stored securely in other
          formats (e.g., DER encoded X.509 certificates) and that the
          application/magic-key data will be generated via tools.</t>
      </section>
      <section title="Discovery" anchor="discovery">
        <t>Server Descriptors resolve directly to "server information"
          documents that contain data about the servers. For now, we
          only describe the "verification_keys" data type, but it's
          easy to imagine how other information can be embedded in
          these documents.</t>
        <t>Server information documents are a simple JSON dictionary.
          The verification keys are stored within an array named
          "magic_keys".  The array's values are objects, each of which
          MUST have a string "value" element containing the
          application/magic-key string, and which MAY have a string
          "key_id" element containing the id of that key.
          If the key_id is omitted from a key, it defaults to the
          Base64url encoding of the SHA-256 hash of the "value"
          parameter.  That is, when doing discovery, processors MUST
          assume that an omitted key_id is equivalent to specifying
          key_id = Base64url(SHA-256(value)).  A signer MAY then use
          this value as a key_id on a signature in order to signal use
          of that key.</t>
          <t>Example:
          <figure><artwork><![CDATA[
{        
  "magic_keys": [
    {"value": "RSA.mVgY8RN6URBTstndvmUUPb4UZTdwvwmddSKE5z_jvKUEK6yk1u3rrC9yN8k6FilGj9K0eeUPe2hf4Pj-5CmHww.AQAB",
     "key_id": "1"},
    {"value": "RSA.wvwmdK0eeUPe2hURBTstndvmUUPb4UZTd6wvwmddSrrC89yN8k6FilGwvwmddSKE5z_jvKUEKj9f4Pj-5CmHww.AQAB",
     "key_id": "2"}
  ]
}
]]></artwork></figure>
          </t>
      </section>
    </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <!-- References split into informative and normative -->
    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References"><!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      &RFC4648;

      &RFC3447;

      &RFC2045;

      &RFC2104;
    </references>
    <references title="Informative References"><!-- Here we use entities that we defined at the beginning. -->
     <reference anchor="MagicSignatures"
        target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-experimental-00.html">
        <front><title>Magic Signatures</title>
          <author initials="J.P." surname="Panzer" fullname="John Panzer">
            <organization/>
          </author>
        </front>
      </reference>

    </references>
    <section title="Specification Feedback">
      <t>The primary driver of this specification is the Salmon protocol.
      Feedback on this specification is thus welcomed via the salmon-discuss mailing
      list, salmon-protocol@googlegroups.com.  For more information, see 
      <eref target="http://groups.google.com/group/salmon-protocol">the Salmon discussion
      group</eref>.  Bugs and errata may also be reported via
      <eref target="http://code.google.com/p/salmon-protocol/issues/list">the Salmon bug tracker
      </eref>.</t>
    </section>
    <!-- Change Log

  -->
  </back>
</rfc>
