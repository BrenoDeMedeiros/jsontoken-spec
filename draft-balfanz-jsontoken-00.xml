<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC4648 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4648.xml">
<!ENTITY RFC3447 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml">
<!ENTITY RFC2045 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml">
<!ENTITY RFC2104 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="no" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<?rfc private="Draft" ?>
<?rfc comments="no"?>
<?rfc inline="no"?>
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-balfanz-jsontoken-00" >
  <!-- ***** FRONT MATTER ***** -->
  <front>
    <title abbrev="JSON Tokens">JSON Tokens</title>
    <author fullname="Dirk Balfanz" initials="D.B." role="editor" surname="Balfanz">
      <organization>Google Inc.</organization>
      <address>
        <postal>
          <street>1600 Ampitheatre Parkway</street>
          <!-- Reorder these if your country does things differently -->
          <city>Mountain View</city>
          <region>CA</region>
          <code/>
          <country>USA</country>
        </postal>
        <phone/>
        <email>balfanz@google.com</email>
        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>
    <author fullname="John Panzer" initials="J.P." surname="Panzer">
      <organization>Google Inc.</organization>
    </author>
    <date month="September" year="2010"/>
    <!-- Meta-data Declarations -->
    <area>General</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>signatures</keyword>
    <keyword>PKI</keyword>
    <abstract>
      <t>This document defines a lightweight, robust mechanism for
      digitally signing authentication and authorization messages
      ("JSON Tokens") in a format that's easily included in HTTP
      requests.</t>
      <t>It is a subset and concrete profile of
      the <xref target="MagicSignatures">Magic Signatures</xref>
      specification.</t>
    </abstract>
  </front>
  <middle>

    <section title="Introduction">
      <t>JSON Tokens are digitally-signed JSON strings with a
         prescribed set of parameters in their payload. We
         use <xref target="compact">Magic Signatures Compact
         Serialization</xref> to encode and sign the JSON payload.</t>
      <t>We include in this spec the relevant portions of
      the <xref target="MagicSignatures">Magic Signatures</xref> spec
      for reference.
      </t>
      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>
    <section anchor="definitions" title="Definitions">
      <t>
        <list style="hanging">
          <t hangText="Signature:">A digital signature that provably
             binds a message to a signer's secret key.</t>
          <t hangText="Signer:">In this specification, a http or https
             URI used to determine a key used to sign an envelope.</t>
        </list>
      </t>
    </section>
    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->
    <?rfc needLines="8" ?>
    <section title="JSON Tokens">
      <t>A JSON Token comprises a JSON payload bundled
         along with a signature for that payload, expressed as a
         series of parameters. JSON Tokens use
         <xref target="compact">Magic Envelope Compact
         Serialization</xref> to transform the payload and parameters
         into a string suitable for inclusion in web requests.</t>

      <section title="Payload Parameters">
        <t>The payload of the Magic Envelope is a JSON object that
        contains the following parameters:
        <list style="hanging">
          <t hangText="issuer">A string that allows the verifier to
            determine the Signer URI. This could be the Signer URI tself, or
            some form of client id, which the verifier can map to a
            Signer URI. Type: string</t>
          <t hangText="not_before">When does this token become valid
            (seconds since midnight 1/1/1970 zulu). Type: integer</t>
          <t hangText="not_after">When does this token expire (seconds
            since midnight 1/1/1970 zulu). Type: integer</t>
          <t hangText="audience">The audience for this token. The
          precise semantics of this field, and how it is validated,
          depends on the application. Type: string</t>
	</list>
        </t>
      </section>

      <section title="Validating JSON Tokens">
	<t>When receiving a JSON Token, a client can validate the token,
          provided it has access to a signature verification key
          (discussed in further detail below). It needs to perform the
          following steps:
	  <list style="numbers">
            <t>verify the data_type envelope parameter in an
              application-dependent manner.</t>
	    <t>extract the key identifier from the token, obtain
              verification key for the Signer and key identifier (more
              details <xref target="mpki">below</xref>).</t>
            <t>using verification key, verify signature on payload as
              explained in <xref target="hmac-verify"/> and
              <xref target="verifying"/>.</t>
            <t>verify that the current time is not before the not_before
              timestamp in the payload, and that the current time is
              not after the expiration time of the token (defined as
              not_before + token_lifetime). The verifier SHOULD be
              lenient and anticipate some clock skew on the issuer's
              side.</t>
            <t>verify the audience payload field in an
              application-dependent manner.</t>
          </list>
	</t>
      </section>
    </section>
    <section title="Excerpts from the Magic Signatures
              Specification">
      <t>Below we reproduce the relevant sections of the
        <xref target="MagicSignatures">Magic Signatures</xref>
        specification for easy reference.</t>

       <section title="Magic Envelope Definition">
         <t>A "Magic Envelope" comprises a message bundled along with [a]
           signature for that message, expressed as a series of
           parameters [...].  The
           envelope specifies the data to be signed, the MIME type of
           the data, the transfer encoding, and the signature.</t>
       <section title="Magic Envelope Parameters" anchor="params">
         <t>This section describes the semantics of the [envelope]
         parameters [...].
        <list style="hanging">
          <t hangText="data:">The payload covered by the signature,
            encoded into an ASCII string.  [...]</t>
          <t hangText="data_type:">The <xref target="RFC2045">MIME</xref>
	    type of the payload prior to encoding.  [...]</t>[
          <t hangText="encoding:">The encoding used to convert between
            the MIME type and the "data" string.  In this
            specification, encoding MUST be the string "base64url",
            indicating the url safe base64 encoding as described
            in <xref target="RFC4648">RFC 4648</xref>, with the
            whitespace normalization rules specified in
            <xref target="encoding_details"/>. [...]</t>
          <t hangText="alg:">The algorithm used for the signature.
            This specification describes only one public key signature
            algorithm, "RSA-SHA256", and one private key signature
            algorithm, "HMAC-SHA256".  Specifications relying on Magic
            Signatures MUST specify which of these MUST be supported
            for a particular protocol.  Implementations of general
            Magic Signatures SHOULD support both for maximum
            interoperability. [...]</t>
          <t hangText="sig:">A generated signature.  This is a string
            in the base64url encoded format as described above.  It is
            generated according to the rules for the "alg" in
            use. [...]</t>
          <t hangText="key_id:">Optional hint indicating which
            specific key owned by the signer should be used to verify
            the signature.  This allows signers to explicitly signal a
            change of key to recipients.  Omitting this parameter is
            equivalent to setting it to an empty string.  The format
            of this parameter is unspecified except that all
            characters must be from the base64url allowed character
            set.  Thus, "", "1", "AH478=", "0x6EF37D", and "fred" are
            all legal key_ids.  The exact format is up to the key
            issuer.  Note that any binary data can be converted into
            an acceptable key_id by base64url encoding it.  One way to
            generate a usable key_id is to base64url-encode the SHA256
            hash of the public signing key's magicsig representation;
            this allows a signer to provide usable ids without
            maintaining a mapping table.</t>
        </list>
        </t>
      </section>
      
      <section title="The Signature Base String" anchor="sbs">
        <t>The Signature Base String used for both RSA-SHA256 and
          HMAC-SHA256 is described here.  It is used as input to the
          signature algorithms, as well as to create
          the <xref target="compact">Compact Serialization</xref>,
          below.</t>
        <t>Given a Magic Envelope with "data", "data_type",
          "encoding", and "alg" parameters, the corresponding
          Signature Base String is produced by concatenating the
          following substrings together, separated by periods (ASCII
          0x2E):</t>
        <t>
        <list style="numbers">
          <t>The armored string for "data" produced by <xref
              target="encoding_details"/></t>
          <t>The Base64url encoding of the "data_type" parameter</t>
          <t>The Base64url encoding of the "encoding" parameter</t>
          <t>The Base64url encoding of the "alg" parameter</t>
        </list>
        An omitted parameter is represented by a zero length placeholder string.
        </t>
      </section>

      <section title="The Magic Envelope Compact Serialization" anchor="compact">
        <t>The Magic Envelope Compact Serialization stores the
          envelope itself in a compact, armored form suitable for
          storage as a simple string.  It is guaranteed to contain no
          spaces and no URL unsafe characters, and allows for only a
          single signature.</t>
        <t>Given a singly signed envelope with one "sig" and one
          "key_id", the Compact Serialization is produced by
          concatenating the following substrings together, separated
          by periods (ASCII 0x2E):</t>
        <t>
        <list style="numbers">
          <t>The value of the "key_id" parameter</t>
          <t>The value of the "sig" parameter</t>
          <t>The Signature Base String as described in <xref target="sbs">The Signature Base
          String</xref>, above.</t>
        </list>
        </t>
        <t>
        For example, if the key_id is "4k8ikoyC2Xh+8BiIeQ+ob7Hcd2J7/Vj3uM61dy9iRMI=",
        the "sig" is "EvGSD2vi8qYcveHnb-rrlok07qnCXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2fWHvLKJzeGLKfyHg8ZomQ",
        and the armored data is "Tm90IHJlYWxseSBBdG9t" with MIME type
        application/atom+xml, then the Compact Serialization would be the string:
        "4k8ikoyC2Xh+8BiIeQ+ob7Hcd2J7/Vj3uM61dy9iRMI=.EvGSD2vi8qYcveHnb-rrlok07qn
        CXjn8YSeCDDXlbhILSabgvNsPpbe76up8w63i2fWHvLKJzeGLKfyHg8ZomQ.Tm90IHJlYWxse
        SBBdG9t.YXBwbGljYXRpb24vYXRvbSt4bWw=.YmFzZTY0dXJs.UlNBLVNIQTI1Ng=="
        </t>
        <t>Any parameter MAY be omitted by leaving its slot empty, as indicated by two
        consecutive periods.  When the "encoding" parameter is omitted, a recipient MUST
        decode the envelope as if it had the value "base64url".  When the "alg" parameter
        is omitted, a recipient MUST interpret the message as if the "alg" parameter 
        had the value "RSA-SHA256".  The "data_type" parameter SHOULD NOT be omitted as it
        provides a defense against content type masquerading attacks.</t>
      </section>
     </section>

     <section title="Encoding of data and sig using base64url" anchor="encoding">
       <t>The data and sig fields of a Magic Envelope are encoded as
          armored ASCII strings using a procedure chosen to be robust
          in the face of various types of transports and storage
          systems.  Specifically, the encoded form is safe to include
          directly as text in XML, a string in JSON, a parameter in
          URLs, or as form data, without escaping.  This section
          defines the mapping between arbitrary binary data (a stream
          of octets) and the armored form (an ASCII string).  The
          ASCII string is also chosen so as to be a valid and
          equivalent UTF-8 string.</t>
        <section title="Encoding" anchor="encoding_details">
          <t>The basic procedure is to use the URL and Filename safe
            variant of the base64 encoding as described in
            <xref target="RFC4648">RFC 4648</xref>, section 5,
            hereafter known as "base64url" encoding.  The result is a
            string that consists only of the ASCII alphanumeric
            characters along with '-' and '_', and possibly '='.  In
            regular expression form, this is
            "^[A-Za-z0-9\-_]*=?=?=?$".  This is the normalized form of
            the encoded data, and is the basis for the octet sequence
            that is used to generate the digital signature.
            Implementations and transports MAY add arbitrary
            whitespace (ASCII values 0x09-0x0D and 0x20) anywhere in
            this string after signing but before output so as to,
            e.g., comply with line length restrictions in certain
            environments.</t>
      </section>
      <section title="Decoding">
        <t>The basic procedure is the reverse of encoding, with the
          additional step that whitespace from the input should be
          ignored.  This is necessary for robustness because some
          transports may insert whitespace, and is useful to allow for
          human readable formatting of documents in any case.
          <list style="numbers">
            <t>Normalize the string by removing all whitespace
              characters from input.</t>
            <t>Base64url decode the resulting string to produce the
              original binary data.</t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="The HMAC-SHA256 Private Key Signature Algorithm">
      <t>This section defines a basic HMAC based private key signature
        algorithm.  HMAC key exchange and rotation is outside the
        scope of this specification, but may be defined in
        specifications relying on this one.</t>
      <section title="Calculating the HMAC-SHA256 signature string">
        <t>First, create an HMAC-SHA256 signature using the algorithm described in 
          <xref target="RFC2104">RFC 2104</xref>, using SHA-256 as the
          hash function H, base string described in
          <xref target="sbs"/> as the input text, and the shared
          secret key K.  The resulting array of bytes is then
          base64url encoded to produce the "sig" parameter.</t>
      </section>
      <section title="Signing and Verifying Messages with HMAC-SHA256"
          anchor="hmac-verify">
        <t>Signing consists of calculating the "sig" parameter and
          serializing it along with the other parameters to create a
          Magic Envelope.  Verifying consists of re-calculating the
          expected "sig" parameter given the other parameters, and
          doing an exact string comparison of the "sig" parameters
          after normalization (whitespace removal).</t>
      </section>
    </section>
    
    <section title="The RSA-SHA256 Public Key Signature Algorithm">
      <t>This section defines the default public key signature
        algorithm for Magic Signatures.  In addition to indicating the
        signing algorithm, use of RSA-SHA256 by default also implies
        use of the Magic Public Key Infrastructure
        <xref target="mpki"/> to obtain public keys.  Specifications
        relying on Magic Signatures MAY specify other mechanisms for
        key retrieval.</t>
      
    <section title="Signing Messages with RSA-SHA256" anchor="signing">
      <t>Signing a message consists of signing the contents of "data",
        "data_type", "encoding", and "alg" using the chosen algorithm.
        This section defines the "RSA-SHA256" algorithm, meaning the
        RSASSA-PKCS1-v1_5 signature algorithm from
        <xref target="RFC3447">RFC 3447</xref> section 8.2, also known
        as PKCS#1, using SHA-256 as the hash function for
        EMSA-PKCS1-v1_5.</t>
      <t>Note: As best current crypto practices change, new algorithms
        will become available and both extensions and future revisions
        of this specification may include additional new public key
        algorithms (e.g., RSASSA-PSS).  When both clients and servers
        have sufficiently widespread support for the latest algorithm,
        older algorithms (e.g., RSASSA-PKCS1-v1_5) will be deprecated
        and removed in subsequent revisions of this specification.</t>
      <t>The signature is computed as signature_octets =
        RSASSA-PKCS1-V1_5-SIGN (K, M), where K is the private signing
        key and M is the <xref target="sbs">Signature Base
        String</xref> defined above.  Thus M is produced by
        concatenating the following substrings together, separated by
        periods (ASCII 0x2E):
        <list style="numbers">
          <t>The armored string for "data" produced by <xref
              target="encoding_details"/></t>
          <t>The Base64url encoding of the "data_type" parameter</t>
          <t>The Base64url encoding of the "encoding" parameter</t>
          <t>The Base64url encoding of the "alg" parameter</t>
        </list>
        For example, if the
        armored data is "Tm90IHJlYWxseSBBdG9t" with MIME type
        application/atom+xml, then M would be the string:
        "Tm90IHJlYWxseSBBdG9t.YXBwbGljYXRpb24vYXRvbSt4bWw=.YmFzZTY0dXJs.UlNBLVNIQTI1Ng=="
      </t>
      <t>For convenience we summarize the steps for the required
        EMSA-PKCS1-v1_5 with RSA-SHA256 algorithm here.  In the
        following, '+' means string concatenation.
        <list style="numbers">
          <t>Let hash = the SHA256 hash digest of M</t>
          <t>Let prefix = the constant byte sequence
          [0x30, 0x31, 0x30, 0xd, 0x6,
          0x9, 0x60, 0x86, 0x48, 0x1, 0x65, 0x3, 0x4, 0x2, 0x1, 0x5,
          0x0, 0x4, 0x20]</t>
          <t>Let k = the number of bytes in the public key modulus</t>
          <t>Let padding = '\xFF' repeated (k - length(prefix+hash) - 3)
            times</t>
          <t>Let emsa =  '\x00' + '\x01' + padding + '\x00' + prefix + hash</t>
          <t>RSA sign the emsa byte sequence</t>
      </list>
    </t>
    <t>The signature is then encoded as in
      <xref target="encoding_details"/> and the resulting ASCII
      armored string stored as a "sig" signature.  The associated
      "key_id" is the key_id associated with that signing key and
      published per <xref target="mpki"/>.  If the signer does not
      maintain individual key_ids, it SHOULD output the base64url
      encoded respresentation of the SHA-256 hash of public key's
      application/magic-key representation.</t>
    </section>

    <section title="Verifying Messages with RSA-SHA256" anchor="verifying">
      <t>Verifying a message signature consists of verifying that
        "sig" is a valid signature for "data" using "alg".  This
        specification defines only the "RSA-SHA256" verification
        algorithm, meaning the RSASSA-PKCS1-v1_5 verification
        algorithm from <xref target="RFC3447">RFC 3447</xref> section
        8.2.1.</t>
      <t>The verification is performed by executing RSASSA-PKCS1-V1_5-VERIFY
        ((n, e), M, S), where (n ,e)
        comprise the public key, M is the message string
        documented in <xref target="signing"/>,
        and S is the decoded value of a selected "sig".  (Note that this
        algorithm creates the emsa byte sequence as in <xref target="signing"/>
        and then performs RSA verification using (n, e), emsa, and S.)[...]</t>
      <t>[...] Signers SHOULD ensure that the content expiration is
        not after the known key expiration time.  That is, the signed
        content should expire no later than the expiration date of the
        key used to sign it.</t>
      <t>Note that emergency key revocation is outside the scope of
        this specification.  However, implementations SHOULD honor
        HTTP cache control directives when retrieving key material and
        SHOULD NOT use keys for verification without revalidating the
        content as directed by the origin server.  This allows origin
        servers to trade off performance for smaller periods of
        vulnerability.</t>
      <t>Unless specified otherwise, the public key (n, e) is obtained
        using the simple public key infrastructure described by
        <xref target="mpki"/>.  Note that several candidate signing
        keys may be retrieved, and in the worst case verifiers MUST
        try each one with equal key_id until at least one successfully
        verifies the signature.  Two key IDs are equal if their
        individual octets are equal and they are of equal length.  A
        signature with an empty (missing) key_id, which may have been
        signed by any key, MUST be verified against all available
        keys.</t>
    </section>

  <section title="Magic Public Key Infrastructure" anchor="mpki">
      <t>This section defines a public key infrastructure based on
        URIs.  [...] Specifically, given a Signer URI such as [...]
        "http://example.com/bob", the corresponding public key(s) for
        that identifier can be discovered as defined below.  The
        result is a set of RSA public keys in a simple string
        format.</t>
      <section title="The application/magic-key MIME type">
        <t>The application/magic-key format is a very minimal format
          for representing public key data.  It consists of a string
          of ASCII text, separated into 3 components, with components
          separated by a "." (0x2E) character.  The first component is
          the key type; this specification only defines the "RSA" key
          type for future upgradeability.  Thus a magic key consists
          of the string "RSA.modulus(n).exponent(e)"; for example:
<figure><artwork><![CDATA[
RSA.mVgY8RN6URBTstndvmUUPb4UZTdwvwmddSKE5z_jvKUEK6yk1u3rrC9yN8k6FilGj9K0eeUPe2hf4Pj-5CmHww.AQAB
]]></artwork></figure>        
        The pair (n, e) is used as input to RSASSA-PKCS1-V1_5-VERIFY.</t>
        <t>Each of the components is first represented as an integer
          in network byte order (big endian) and encoded via the
          "base64url" mechanism described in <xref target="params"/>.
        </t>
        <t>This specificaion defines only a public key format, and
          anticipates that keypairs may be stored securely in other
          formats (e.g., DER encoded X.509 certificates) and that the
          application/magic-key data will be generated via tools.</t>
      </section>
      <section title="Discovery">
        <t>This section defines how to map from a signer URI
          identifier to a set of public signing keys for that
          identifier.  [...]</t>
        <t>The end result of discovery will be a collection of magic
          keys.  Each magic key has a "data" parameter, a string in
          application/magic-key format; and an optional "key_id"
          parameter, a string as defined in [TBD:REF].  If the key_id
          is omitted from a key, it defaults to the Base64url encoding
          of the SHA-256 hash of the "value" parameter.  That is, when
          doing discovery, processors MUST assume that an omitted
          key_id is equivalent to specifying key_id =
          Base64url(SHA-256(value)).  A signer MAY then use this value
          as a key_id on a signature in order to signal use of that
          key.[...]</t>
        <section title="The JSON Serialization of Magic Keys">
          <t>The keys are stored within an array named "magic_keys".
            The array's values are objects, each of which MUST have a
            string "value" element containing the
            application/magic-key string, and which MAY have a string
            "key_id" element containing the id of that key.</t>
          <t>Example:
          <figure><artwork><![CDATA[
{        
  "magic_keys": [
    {"value": "RSA.mVgY8RN6URBTstndvmUUPb4UZTdwvwmddSKE5z_jvKUEK6yk1u3rrC9yN8k6FilGj9K0eeUPe2hf4Pj-5CmHww.AQAB",
     "key_id": "1"},
    {"value": "RSA.wvwmdK0eeUPe2hURBTstndvmUUPb4UZTd6wvwmddSrrC89yN8k6FilGwvwmddSKE5z_jvKUEKj9f4Pj-5CmHww.AQAB",
     "key_id": "2"}
  ]
}
]]></artwork></figure>
          </t>
        </section>
                
        <section title="Discovery Flow">
          <t>Given a [Signer] URI U, [...] directly retrieve the
            resource U via SSL, performing necessary certificate
            checks, and see if the resulting data is of type
            application/metadata+json.  If so, look for the
            "magic_public_keys" array as per the JSON Serialization.
            [...]</t>
          </section>
          <section title="Key Selection">
            <t>Once a set of possible key candidates have been
              determined, via discovery or alternatively via an
              extension mechanism outside the scope of this
              specification, a verifier must then determine whether a
              given signature is valid.  This section details how to
              do so in an interoperable way.</t>
            <t>Among the available keys, select the key for
              verification by matching the key_id against the key_id
              specified in the signature.  In this context an empty
              string key_id matches everything.  This produces a
              smaller set of possible keys to use for verification.
              Verification succeeds if any one of these keys
              successfully verifies the signature.[...]</t>
          </section>
      </section>
     </section> 
    </section>    
   </section>
  </middle>
  <!--  *****BACK MATTER ***** -->
  <back>
    <!-- References split into informative and normative -->
    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
    <references title="Normative References"><!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      &RFC4648;

      &RFC3447;

      &RFC2045;

      &RFC2104;
    </references>
    <references title="Informative References"><!-- Here we use entities that we defined at the beginning. -->
     <reference anchor="MagicSignatures"
        target="http://salmon-protocol.googlecode.com/svn/trunk/draft-panzer-magicsig-experimental-00.html">
        <front><title>Magic Signatures</title>
          <author initials="J.P." surname="Panzer" fullname="John Panzer">
            <organization/>
          </author>
        </front>
      </reference>

    </references>
    <!-- Change Log

  -->
  </back>
</rfc>
